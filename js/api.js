/**
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MailSlurp
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API
 */
class MailSlurpApi {
    constructor() {
        this.keyPool = new ApiKeyPool();
        this.keyManager = new ApiKeyManager(this.keyPool);
        this.baseUrl = 'https://api.mailslurp.com';
        this.maxRetries = 3;
        this.retryDelay = 1000;
        this.performanceOptimizer = new PerformanceOptimizer();
    }

    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å
     */
    async request(endpoint, options = {}) {
        const apiKey = this.keyManager.getKey();
        const maskedKey = apiKey.substring(0, 8) + '...' + apiKey.substring(apiKey.length - 4);
        
        const defaultOptions = {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'x-api-key': apiKey
            }
        };

        const finalOptions = {
            ...defaultOptions,
            ...options,
            headers: {
                ...defaultOptions.headers,
                ...options.headers
            }
        };

        // –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å –∞–∫—Ç–∏–≤–Ω—ã–º –∫–ª—é—á–æ–º
        console.log(`üîë ${finalOptions.method} ${endpoint} [–ö–ª—é—á: ${maskedKey}]`);

        try {
            const response = await fetch(`${this.baseUrl}${endpoint}`, finalOptions);
            
            if (!response.ok) {
                const error = new Error(`HTTP error! status: ${response.status}`);
                error.status = response.status;
                error.response = await response.json().catch(() => ({}));
                
                // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ª–∏–º–∏—Ç–æ–≤
                if (error.response && error.response.message) {
                    const message = error.response.message;
                    
                    // –ü—Ä–µ–≤—ã—à–µ–Ω –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç CreateInbox
                    if (message.includes('CreateInbox feature limit') || 
                        message.includes('limit') && message.includes('exceeded')) {
                        console.error(`‚ùå –ö–ª—é—á ${maskedKey} –∏—Å—á–µ—Ä–ø–∞–ª –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç!`);
                        error.isLimitExceeded = true;
                    }
                }
                
                // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –∫–ª—é—á–∞
                this.keyManager.handleKeyError(apiKey, error);
                
                throw error;
            }

            const data = await response.json();
            return data;
        } catch (error) {
            console.error('API Request Error:', error);
            throw error;
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
     */
    async requestWithRetry(endpoint, options = {}, retries = this.maxRetries) {
        try {
            return await this.request(endpoint, options);
        } catch (error) {
            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –∫–ª—é—á
            const shouldRetry = error.status === 401 || 
                              error.status === 403 || 
                              error.status === 429 ||
                              error.status === 500 ||
                              error.isLimitExceeded; // –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
            
            if (retries > 0 && this.keyManager.hasAvailableKeys() && shouldRetry) {
                const activeKeys = this.keyPool.getActiveKeysCount();
                
                if (error.isLimitExceeded) {
                    console.warn(`‚ö†Ô∏è –ö–ª—é—á –∏—Å—á–µ—Ä–ø–∞–ª –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç (${endpoint}). –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π... (–û—Å—Ç–∞–ª–æ—Å—å –∫–ª—é—á–µ–π: ${activeKeys})`);
                } else if (error.status === 429) {
                    console.warn(`‚ö†Ô∏è Rate Limit (429). –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á... (–û—Å—Ç–∞–ª–æ—Å—å: ${activeKeys})`);
                } else if (error.status === 401 || error.status === 403) {
                    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (${error.status}). –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á... (–û—Å—Ç–∞–ª–æ—Å—å: ${activeKeys})`);
                } else {
                    console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞, –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${retries}`);
                }
                
                await this.delay(this.retryDelay);
                return this.requestWithRetry(endpoint, options, retries - 1);
            }
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π
            if (!this.keyManager.hasAvailableKeys()) {
                console.error('‚ùå –í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã! –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª–µ js/config.js.');
            }
            
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫
     */
    async createInbox(options = {}) {
        const cacheKey = `inbox_${Date.now()}`;
        
        // MailSlurp API –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        const payload = {};
        if (options.name) {
            payload.name = options.name;
        }
        if (options.expiresAt) {
            payload.expiresAt = options.expiresAt;
        }

        const endpoint = '/inboxes';
        
        try {
            const requestOptions = {
                method: 'POST'
            };
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ —Ç–µ–ª–æ
            if (Object.keys(payload).length > 0) {
                requestOptions.body = JSON.stringify(payload);
            }
            
            const inbox = await this.requestWithRetry(endpoint, requestOptions);

            // –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.performanceOptimizer.setCache(cacheKey, inbox, 300000); // 5 –º–∏–Ω—É—Ç
            
            return inbox;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞:', error);
            console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response || error.message);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤
     */
    async getInboxes() {
        const cacheKey = 'inboxes_list';
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à
        const cached = this.performanceOptimizer.getFromCache(cacheKey);
        if (cached) {
            return cached;
        }

        try {
            const inboxes = await this.requestWithRetry('/inboxes');
            
            // –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.performanceOptimizer.setCache(cacheKey, inboxes, 60000); // 1 –º–∏–Ω—É—Ç–∞
            
            return inboxes;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —è—â–∏–∫–æ–≤:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –ø–æ ID
     */
    async getInbox(inboxId) {
        const cacheKey = `inbox_${inboxId}`;
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à
        const cached = this.performanceOptimizer.getFromCache(cacheKey);
        if (cached) {
            return cached;
        }

        try {
            const inbox = await this.requestWithRetry(`/inboxes/${inboxId}`);
            
            // –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.performanceOptimizer.setCache(cacheKey, inbox, 60000);
            
            return inbox;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è—â–∏–∫–∞:', error);
            throw error;
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫
     */
    async deleteInbox(inboxId) {
        try {
            await this.requestWithRetry(`/inboxes/${inboxId}`, {
                method: 'DELETE'
            });

            // –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
            this.performanceOptimizer.clearCache(`inbox_${inboxId}`);
            this.performanceOptimizer.clearCache('inboxes_list');
            
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —è—â–∏–∫–∞:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–∏—Å—å–º–∞ –∏–∑ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞
     */
    async getEmails(inboxId, options = {}) {
        const cacheKey = `emails_${inboxId}`;
        
        // –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º
        const params = new URLSearchParams();
        if (options.limit) params.append('limit', options.limit);
        if (options.sort) params.append('sort', options.sort);

        const endpoint = `/inboxes/${inboxId}/emails?${params.toString()}`;

        try {
            const emails = await this.requestWithRetry(endpoint);
            return emails;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å–µ–º:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–∏—Å—å–º–æ –ø–æ ID
     */
    async getEmail(emailId) {
        const cacheKey = `email_${emailId}`;
        
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à
        const cached = this.performanceOptimizer.getFromCache(cacheKey);
        if (cached) {
            return cached;
        }

        try {
            const email = await this.requestWithRetry(`/emails/${emailId}`);
            
            // –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            this.performanceOptimizer.setCache(cacheKey, email, 300000); // 5 –º–∏–Ω—É—Ç
            
            return email;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å—å–º–∞:', error);
            throw error;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ
     */
    async sendEmail(inboxId, emailData) {
        const payload = {
            to: emailData.to ? [emailData.to] : [],
            subject: emailData.subject || '',
            body: emailData.body || '',
            from: emailData.from || null
        };

        try {
            const result = await this.requestWithRetry(`/inboxes/${inboxId}/send`, {
                method: 'POST',
                body: JSON.stringify(payload)
            });

            return result;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞:', error);
            throw error;
        }
    }

    /**
     * –û–∂–∏–¥–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å—å–º–∞
     */
    async waitForLatestEmail(inboxId, timeout = 30000) {
        const params = new URLSearchParams({
            timeout: timeout,
            unreadOnly: true
        });

        try {
            const email = await this.requestWithRetry(
                `/inboxes/${inboxId}/waitForLatestEmail?${params.toString()}`,
                {},
                1 // –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
            );

            return email;
        } catch (error) {
            if (error.status === 408) {
                // –¢–∞–π–º–∞—É—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                return null;
            }
            console.error('–û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–∏—Å—å–º–∞:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å API –∫–ª—é—á–∞
     */
    async getApiKeyStatus() {
        try {
            const status = await this.requestWithRetry('/account');
            return status;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ API –∫–ª—é—á–∞:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–¥–µ—Ä–∂–∫–∞
     */
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—É–ª –∫–ª—é—á–µ–π
     */
    getKeyPool() {
        return this.keyPool;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –∫–ª—é—á–µ–π
     */
    getKeyManager() {
        return this.keyManager;
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
     */
    clearCache() {
        this.performanceOptimizer.clearCache();
    }
}

